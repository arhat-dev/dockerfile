buildah:build:
################################
#
# Base
#
################################

- name: linux/base
  matrix@file: &matrix common/matrix-base.yml
  file@template: |-
    {{- if and (ne .Env.MATRIX_CROSS_ARCH "") (ne .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH) -}}
    common/base-cross.dockerfile
    {{- else -}}
    common/base.dockerfile
    {{- end -}}

  image_names@template: &base_image_names |-
    {{- $prefix := printf "%s/base-%s" .Env.IMAGE_REPO .Env.MATRIX_LANGUAGE -}}
    {{- $tag := printf "%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH -}}
    {{- if and (ne .Env.MATRIX_CROSS_ARCH "") (ne .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH) -}}
      {{- $tag = printf "%s-%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH -}}
    {{- end }}

    - image: {{ $prefix }}:{{ .Env.MATRIX_VERSION }}-{{ $tag }}

  extra_args@template: |-
    {{- $host_arch := "" -}}
    {{- $cross_arch := "" -}}
    {{- $triple_name := "" -}}
    {{- if eq .Env.MATRIX_ROOTFS "debian" -}}
      {{- $host_arch = getDebianArch .Env.MATRIX_ARCH -}}
      {{- $cross_arch = getDebianArch .Env.MATRIX_CROSS_ARCH -}}
      {{- $triple_name = getDebianTripleName .Env.MATRIX_CROSS_ARCH -}}
    {{- else if eq .Env.MATRIX_ROOTFS "alpine" -}}
      {{- $host_arch = getAlpineArch .Env.MATRIX_ARCH -}}
      {{- $cross_arch = getAlpineArch .Env.MATRIX_CROSS_ARCH -}}
      {{- $triple_name = getAlpineTripleName .Env.MATRIX_CROSS_ARCH -}}
    {{- end -}}

    {{- $rootfs_with_version := "" -}}
    {{- if eq .Env.MATRIX_ROOTFS "debian" -}}
      {{- $rootfs_with_version = .Env.DEBIAN_VERSION -}}
    {{- else if eq .Env.MATRIX_ROOTFS "alpine" -}}
      {{- $rootfs_with_version = printf "alpine%s" .Env.ALPINE_VERSION -}}
    {{- end -}}

    {{- $base_image := "" -}}
    {{- if eq .Env.MATRIX_LANGUAGE "golang" "python" "rust" "ruby" -}}
      {{- $base_image = printf "docker.io/%s/%s:%s-%s" (getDockerHubArch .Env.MATRIX_ARCH) .Env.MATRIX_LANGUAGE .Env.MATRIX_VERSION $rootfs_with_version -}}
    {{- else if eq .Env.MATRIX_LANGUAGE "java" -}}
      {{- $base_image = printf "docker.io/%s/node:%s-%s" (getDockerHubArch .Env.MATRIX_ARCH) .Env.MATRIX_VERSION $rootfs_with_version -}}
    {{- else if eq .Env.MATRIX_LANGUAGE "java" -}}
      {{- $repo_name := printf "openjdk%s" .Env.MATRIX_VERSION -}}
      {{- if eq .Env.MATRIX_ARCH "amd64" "s390x" "ppc64le" -}}
        {{- $repo_name = printf "%s-openj9" $repo_name -}}
      {{- end -}}

      {{- $tag_name := "" -}}
      {{- if eq .Env.MATRIX_ROOTFS "debian" -}}
        {{- $tag_name = "debianslim-slim" -}}
      {{- else if eq .Env.MATRIX_ROOTFS "alpine" -}}
        {{- $tag_name = "alpine-slim" -}}
      {{- end -}}

      {{- $base_image = printf "docker.io/adoptopenjdk/%s:%s" $repo_name $tag_name -}}
    {{- end -}}
    {{ if eq .Env.MATRIX_LANGUAGE "java" }}
    # adoptopenjdk sets os/arch/variant
    - --os={{ .Env.MATRIX_KERNEL | getOciOS }}
    - --arch={{ .Env.MATRIX_ARCH | getOciArch }}
    - --variant={{ .Env.MATRIX_ARCH | getOciArchVariant }}
    {{ end }}
    - --pull-always
    - --no-cache
    - --build-arg
    - BASE_IMAGE={{ $base_image }}
    # - --build-arg
    # - QEMU_ARCH={{ getQemuArch .Env.MATRIX_ARCH }}
    # - --build-arg
    # - QEMU_VERSION={{ .Env.QEMU_VERSION }}
    - --build-arg
    - PROGRAMMING_LANGUAGE={{ .Env.MATRIX_LANGUAGE }}
    - --build-arg
    - MATRIX_ROOTFS={{ .Env.MATRIX_ROOTFS }}
    - --build-arg
    - HOST_ARCH={{ $host_arch }}
    - --build-arg
    - CROSS_ARCH={{ $cross_arch }}
    - --build-arg
    - CROSS_TRIPLE_NAME={{ $triple_name }}
    - --build-arg
    - MATRIX_ARCH={{ .Env.MATRIX_ARCH }}
    - --build-arg
    - MATRIX_CROSS_ARCH={{ .Env.MATRIX_CROSS_ARCH }}
    # for java
    - --build-arg
    - MAVEN3_VERSION={{ .Env.MAVEN3_VERSION }}

################################
#
# Builder
#
################################

- name: linux/builder-prepare-dukkha
  matrix@file: *matrix
  file: common/builder.dockerfile
  image_names@env:
  - image: local-dukkha:${MATRIX_ARCH}
  extra_args@env:
  - --target=dukkha
  - --pull-always
  - --build-arg
  - DUKKHA_IMAGE=ghcr.io/arhat-dev/dukkha:latest-${MATRIX_ARCH}
  - --build-arg
  - BASE_IMAGE=scratch

- name: linux/builder
  matrix@file: *matrix
  hooks:
    before:matrix:
    - task: buildah:build(linux/builder-prepare-dukkha)
  file: common/builder.dockerfile
  image_names@template: &builder_image_names |-
    {{- $prefix := printf "%s/builder-%s" .Env.IMAGE_REPO .Env.MATRIX_LANGUAGE -}}
    {{- $tag := printf "%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH -}}
    {{- $manifest_tag := .Env.MATRIX_ROOTFS -}}
    {{- if and (ne .Env.MATRIX_CROSS_ARCH "") (ne .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH) -}}
      {{- $tag = printf "%s-%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH -}}
      {{- $manifest_tag = "" -}}
    {{- end }}

    - image: {{ $prefix }}:{{ $tag }}
      {{- if $manifest_tag }}
      manifest: {{ $prefix }}:{{ $manifest_tag }}
      {{- end -}}

  extra_args@template: |-
    {{- $prefix := printf "%s/base-%s" .Env.IMAGE_REPO .Env.MATRIX_LANGUAGE -}}
    {{- $tag := printf "%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH -}}
    {{- if and (ne .Env.MATRIX_CROSS_ARCH "") (ne .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH) -}}
      {{- $tag = printf "%s-%s-%s" .Env.MATRIX_ROOTFS .Env.MATRIX_ARCH .Env.MATRIX_CROSS_ARCH -}}
    {{- end -}}

    {{- $base_image_name := printf "%s:%s-%s" $prefix .Env.MATRIX_VERSION $tag -}}
    {{- $base_image_id := os_ReadFile (getBuildahImageIDFile $base_image_name) -}}

    {{- $dukkha_image_name := printf "local-dukkha:%s" .Env.MATRIX_ARCH -}}
    {{- $dukkha_image_id := os_ReadFile (getBuildahImageIDFile $dukkha_image_name) -}}

    - --pull-never
    - --build-arg
    - DUKKHA_IMAGE={{ $dukkha_image_id }}
    - --build-arg
    - BASE_IMAGE={{ $base_image_id }}

################################
#
# Container
#
################################

buildah:push:
- name: linux/base
  hooks:
    before:
    - task: buildah:login(ghcr)
  matrix@file: *matrix
  image_names@template: *base_image_names

- name: linux/builder
  hooks:
    before:
    - task: buildah:login(ghcr)
  matrix@file: *matrix
  image_names@template: *builder_image_names
